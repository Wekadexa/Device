// Generated by view binder compiler. Do not edit!
package com.example.devicelockcompanion.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.example.devicelockcompanion.R;
import com.google.android.material.card.MaterialCardView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final LinearLayout actionsContainer;

  @NonNull
  public final TextView actionsTitle;

  @NonNull
  public final ImageView deviceLockIcon;

  @NonNull
  public final CardView deviceLockStatusCard;

  @NonNull
  public final View deviceLockStatusIndicator;

  @NonNull
  public final TextView deviceLockStatusText;

  @NonNull
  public final MaterialCardView disclaimerCard;

  @NonNull
  public final Button launchFactoryEnrollActivityButton;

  @NonNull
  public final Button launchUpdateActivityButton;

  @NonNull
  public final CardView logsCard;

  @NonNull
  public final TextView logsTextView;

  @NonNull
  public final TextView logsTitle;

  @NonNull
  public final CardView noDeviceLockCard;

  @NonNull
  public final LinearLayout rootActionsContainer;

  @NonNull
  public final ImageView rootIcon;

  @NonNull
  public final CardView rootStatusCard;

  @NonNull
  public final View rootStatusIndicator;

  @NonNull
  public final TextView rootStatusText;

  @NonNull
  public final TextView titleTextView;

  @NonNull
  public final Button triggerSecretCodeButton;

  @NonNull
  public final Button viewDatabasesButton;

  @NonNull
  public final Button viewSharedPreferencesButton;

  @NonNull
  public final Button wipeRegistrationDataButton;

  private ActivityMainBinding(@NonNull ConstraintLayout rootView,
      @NonNull LinearLayout actionsContainer, @NonNull TextView actionsTitle,
      @NonNull ImageView deviceLockIcon, @NonNull CardView deviceLockStatusCard,
      @NonNull View deviceLockStatusIndicator, @NonNull TextView deviceLockStatusText,
      @NonNull MaterialCardView disclaimerCard, @NonNull Button launchFactoryEnrollActivityButton,
      @NonNull Button launchUpdateActivityButton, @NonNull CardView logsCard,
      @NonNull TextView logsTextView, @NonNull TextView logsTitle,
      @NonNull CardView noDeviceLockCard, @NonNull LinearLayout rootActionsContainer,
      @NonNull ImageView rootIcon, @NonNull CardView rootStatusCard,
      @NonNull View rootStatusIndicator, @NonNull TextView rootStatusText,
      @NonNull TextView titleTextView, @NonNull Button triggerSecretCodeButton,
      @NonNull Button viewDatabasesButton, @NonNull Button viewSharedPreferencesButton,
      @NonNull Button wipeRegistrationDataButton) {
    this.rootView = rootView;
    this.actionsContainer = actionsContainer;
    this.actionsTitle = actionsTitle;
    this.deviceLockIcon = deviceLockIcon;
    this.deviceLockStatusCard = deviceLockStatusCard;
    this.deviceLockStatusIndicator = deviceLockStatusIndicator;
    this.deviceLockStatusText = deviceLockStatusText;
    this.disclaimerCard = disclaimerCard;
    this.launchFactoryEnrollActivityButton = launchFactoryEnrollActivityButton;
    this.launchUpdateActivityButton = launchUpdateActivityButton;
    this.logsCard = logsCard;
    this.logsTextView = logsTextView;
    this.logsTitle = logsTitle;
    this.noDeviceLockCard = noDeviceLockCard;
    this.rootActionsContainer = rootActionsContainer;
    this.rootIcon = rootIcon;
    this.rootStatusCard = rootStatusCard;
    this.rootStatusIndicator = rootStatusIndicator;
    this.rootStatusText = rootStatusText;
    this.titleTextView = titleTextView;
    this.triggerSecretCodeButton = triggerSecretCodeButton;
    this.viewDatabasesButton = viewDatabasesButton;
    this.viewSharedPreferencesButton = viewSharedPreferencesButton;
    this.wipeRegistrationDataButton = wipeRegistrationDataButton;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.actionsContainer;
      LinearLayout actionsContainer = rootView.findViewById(id);
      if (actionsContainer == null) {
        break missingId;
      }

      id = R.id.actionsTitle;
      TextView actionsTitle = rootView.findViewById(id);
      if (actionsTitle == null) {
        break missingId;
      }

      id = R.id.deviceLockIcon;
      ImageView deviceLockIcon = rootView.findViewById(id);
      if (deviceLockIcon == null) {
        break missingId;
      }

      id = R.id.deviceLockStatusCard;
      CardView deviceLockStatusCard = rootView.findViewById(id);
      if (deviceLockStatusCard == null) {
        break missingId;
      }

      id = R.id.deviceLockStatusIndicator;
      View deviceLockStatusIndicator = rootView.findViewById(id);
      if (deviceLockStatusIndicator == null) {
        break missingId;
      }

      id = R.id.deviceLockStatusText;
      TextView deviceLockStatusText = rootView.findViewById(id);
      if (deviceLockStatusText == null) {
        break missingId;
      }

      id = R.id.disclaimerCard;
      MaterialCardView disclaimerCard = rootView.findViewById(id);
      if (disclaimerCard == null) {
        break missingId;
      }

      id = R.id.launchFactoryEnrollActivityButton;
      Button launchFactoryEnrollActivityButton = rootView.findViewById(id);
      if (launchFactoryEnrollActivityButton == null) {
        break missingId;
      }

      id = R.id.launchUpdateActivityButton;
      Button launchUpdateActivityButton = rootView.findViewById(id);
      if (launchUpdateActivityButton == null) {
        break missingId;
      }

      id = R.id.logsCard;
      CardView logsCard = rootView.findViewById(id);
      if (logsCard == null) {
        break missingId;
      }

      id = R.id.logsTextView;
      TextView logsTextView = rootView.findViewById(id);
      if (logsTextView == null) {
        break missingId;
      }

      id = R.id.logsTitle;
      TextView logsTitle = rootView.findViewById(id);
      if (logsTitle == null) {
        break missingId;
      }

      id = R.id.noDeviceLockCard;
      CardView noDeviceLockCard = rootView.findViewById(id);
      if (noDeviceLockCard == null) {
        break missingId;
      }

      id = R.id.rootActionsContainer;
      LinearLayout rootActionsContainer = rootView.findViewById(id);
      if (rootActionsContainer == null) {
        break missingId;
      }

      id = R.id.rootIcon;
      ImageView rootIcon = rootView.findViewById(id);
      if (rootIcon == null) {
        break missingId;
      }

      id = R.id.rootStatusCard;
      CardView rootStatusCard = rootView.findViewById(id);
      if (rootStatusCard == null) {
        break missingId;
      }

      id = R.id.rootStatusIndicator;
      View rootStatusIndicator = rootView.findViewById(id);
      if (rootStatusIndicator == null) {
        break missingId;
      }

      id = R.id.rootStatusText;
      TextView rootStatusText = rootView.findViewById(id);
      if (rootStatusText == null) {
        break missingId;
      }

      id = R.id.titleTextView;
      TextView titleTextView = rootView.findViewById(id);
      if (titleTextView == null) {
        break missingId;
      }

      id = R.id.triggerSecretCodeButton;
      Button triggerSecretCodeButton = rootView.findViewById(id);
      if (triggerSecretCodeButton == null) {
        break missingId;
      }

      id = R.id.viewDatabasesButton;
      Button viewDatabasesButton = rootView.findViewById(id);
      if (viewDatabasesButton == null) {
        break missingId;
      }

      id = R.id.viewSharedPreferencesButton;
      Button viewSharedPreferencesButton = rootView.findViewById(id);
      if (viewSharedPreferencesButton == null) {
        break missingId;
      }

      id = R.id.wipeRegistrationDataButton;
      Button wipeRegistrationDataButton = rootView.findViewById(id);
      if (wipeRegistrationDataButton == null) {
        break missingId;
      }

      return new ActivityMainBinding((ConstraintLayout) rootView, actionsContainer, actionsTitle,
          deviceLockIcon, deviceLockStatusCard, deviceLockStatusIndicator, deviceLockStatusText,
          disclaimerCard, launchFactoryEnrollActivityButton, launchUpdateActivityButton, logsCard,
          logsTextView, logsTitle, noDeviceLockCard, rootActionsContainer, rootIcon, rootStatusCard,
          rootStatusIndicator, rootStatusText, titleTextView, triggerSecretCodeButton,
          viewDatabasesButton, viewSharedPreferencesButton, wipeRegistrationDataButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
